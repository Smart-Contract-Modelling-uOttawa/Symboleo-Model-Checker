MODULE Timer(start, _max_time_)
 DEFINE _time :=  expired1 ? _max_time_ : -1;
 VAR active1  : boolean;
     expired1 : boolean;
 ASSIGN
   init(active1) := start;
   next(active1) := (active1 | start) ? TRUE : active1;
   init(expired1) :=  active1 ? {TRUE,FALSE} : FALSE;
   next(expired1) :=  case
           active1 & !expired1 : {TRUE,FALSE};
           expired1           : TRUE;
           TRUE              : FALSE;
       esac;

MODULE Event(start, _max_time_)
 DEFINE _inactive := (state = inactive);
        _happened := (state = happened);
        _expired  := (state = expired);
 VAR triggered : boolean;
         timer : Timer(start & !_happened & !_expired, _max_time_);
         state : {inactive, active, happened, expired};
		 performer	: {"CBEEF", "COSTCO"};

 ASSIGN
	-- init(performer) := {PERFORMERS_DOMAIN};  -- Pick one non deterministically among the possible values.
	next(performer)	:= case
		state=active & start	: {"CBEEF", "COSTCO"};
		TRUE	 				: performer;
	esac;
 ASSIGN
  init(triggered) := FALSE;
  next(triggered) := (state=active & start) ? {FALSE,TRUE} : FALSE;
  init(state)     := inactive;
  next(state)     := case
    state=inactive & start                          : active;
    state=active & start & triggered &
                           timer._time<_max_time_   : happened;
    state=active & start & timer._time = _max_time_ : expired;
    TRUE                                            : state;
  esac;

--------------------------------------------------------------------------------------
-- 'name' is party name
-- 'removeL/R/P' releases liability, righHolder or performer position of a party
-- 'addL/R/P' adds liability, righHolder or performer position to a party
--------------------------------------------------------------------------------------
MODULE Party(norm, name, removeL, addL, removeR, addR, removeP, addP)
  DEFINE
	_name 			:= name;
	_norm			:= norm;
	_is_performer	:= p_state=P;
	_is_liable		:= l_state=L;
	_is_rightHolder	:= r_state=R;

  VAR
	l_state	: {Init, L};
	r_state	: {Init, R};
	p_state	: {Init, P};

  ASSIGN
	init(l_state) := Init;
	next(l_state)	:= case
		l_state=Init & addL	: L;
		l_state=L &removeL	: Init;
		TRUE				: l_state;
	esac;

  ASSIGN
	init(r_state) := Init;
	next(r_state)	:= case
		r_state=Init & addR	: R;
		r_state=R & removeR : Init;
		TRUE				: r_state;
	esac;

  ASSIGN
	init(p_state) := Init;
	next(p_state)	:= case
		p_state=Init & addP : P;
		p_state=P & removeP	: Init;
		TRUE				: p_state;
	esac;

  INVAR
	!(addL & removeL) &
	!(addR & removeR) &
	!(addP & removeP) &
	!(_is_rightHolder & _is_liable);

--------------------------------------------------------------------------------------
-- 'cnt_in_effect'    indicates if the contract is in inEffect state
-- 'power_suspended'  indicates if a power suspends the obligation
-- 'cnt_suspended'    indicates if the contract suspension suspends the obligation
-- 'power_resumed'    indicates if a power resumption resumes the obligation
-- 'cnt_resumed'      indicates if the contract resumption resumes the obligation
--------------------------------------------------------------------------------------
MODULE Obligation(surviving, cnt_in_effect, cnt_untermination,
                  fulfilled, triggered, violated, activated,
				  expired1, power_suspended, cnt_suspended, terminated, power_resumed,
				  cnt_resumed, discharged, antecedent)
  DEFINE
	_surviving	:= surviving;
	_suspended 	:= (power_suspended | (cnt_suspended & !surviving));
	_active 	:= (state = inEffect | state = suspension);

  VAR
	state 		: {not_created, create, inEffect, suspension, discharge,
				   fulfillment, violation, unsTermination};
	sus_state	: {not_suspended, sus_by_contract, sus_by_power};

  ASSIGN
 --NEW: update axioms(surviving obligations are not suspended! informally mentioned)
	init(sus_state) := not_suspended;
	next(sus_state)	:= case
		sus_state=not_suspended & !surviving & cnt_suspended 	: sus_by_contract;
		sus_state=sus_by_contract & !surviving & cnt_resumed	: not_suspended;
		sus_state=not_suspended & !surviving & power_suspended 	: sus_by_power;
		sus_state=sus_by_power & !surviving & power_resumed		: not_suspended;
		TRUE													: sus_state;
	esac;

  ASSIGN
    init(state) := not_created;
    next(state) := case
		cnt_in_effect & state=not_created   & triggered & !antecedent : create;
		cnt_in_effect & state=not_created   & triggered & antecedent  : inEffect;
		cnt_in_effect & state=create        & antecedent              : inEffect;
		cnt_in_effect & state=create        & (expired1 | discharged)  : discharge;
		cnt_in_effect & state=inEffect      & fulfilled               : fulfillment;
		cnt_in_effect & state=inEffect      & _suspended              : suspension;
		cnt_in_effect & state=inEffect      & violated                : violation;
		cnt_in_effect & _active            	& terminated              : unsTermination;
		cnt_untermination & !surviving  	& _active           	  : unsTermination;
		sus_state=sus_by_contract & state=suspension  & cnt_resumed   : inEffect;
		sus_state=sus_by_power	  & state=suspension  & power_resumed   : inEffect;
		TRUE                                                          : state;
  esac;

--------------------------------------------------------------------------------------
-- 'cnt_in_effect'   indicates if the contract is in inEffect state
-- 'power_suspended' indicates if a power suspends the power
-- 'cnt_suspended'   indicates if the contract suspension suspends the power
-- 'power_resumed'   indicates if a power resumption resumes the power
-- 'cnt_resumed'     indicates if the contract resumption resumes the power
--------------------------------------------------------------------------------------
MODULE Power(cnt_in_effect, triggered, activated, expired1, power_suspended, cnt_suspended,
       	     terminated, exerted, power_resumed, cnt_resumed, antecedent)
  DEFINE
	_active 	 := (state = inEffect | state = suspension);
	_suspended 	 := (power_suspended | cnt_suspended);

  VAR
	state 		: {not_created, create, inEffect, suspension, sTermination, unsTermination};
	sus_state	: {not_suspended, sus_by_contract, sus_by_power};

  ASSIGN
	init(sus_state) := not_suspended;
	next(sus_state)	:= case
		sus_state=not_suspended & cnt_suspended 	: sus_by_contract;
		sus_state=sus_by_contract & cnt_resumed		: not_suspended;
		sus_state=not_suspended & power_suspended 	: sus_by_power;
		sus_state=sus_by_power & power_resumed		: not_suspended;
		TRUE										: sus_state;
	esac;

  ASSIGN
   init(state) := not_created;
   next(state) := case
     cnt_in_effect & state = not_created 	& triggered & !antecedent : create;
     cnt_in_effect & state = not_created 	& triggered & antecedent  : inEffect;
     cnt_in_effect & state = create      	& antecedent              : inEffect;
     cnt_in_effect & state = create      	& expired1                : unsTermination;
     cnt_in_effect & state = inEffect    	& exerted                 : sTermination;
     cnt_in_effect & state = inEffect   	& _suspended              : suspension;
     cnt_in_effect & state = inEffect    	& expired1                : unsTermination;
	 cnt_in_effect & _active  			 	& terminated              : unsTermination;

	 sus_state=sus_by_contract & state=suspension  & cnt_resumed 	  : inEffect;
	 sus_state=sus_by_power	   & state=suspension  & power_resumed      : inEffect;

     TRUE                                          				   	  : state;
   esac;

--------------------------------------------------------------------------------------
-- 'assigned_party'				 indicates if a party is assigned to a role
-- 'revoked_party'				 indicates if a party is unassigned from a role
-- 'fulfilled_active_obligation' indicates if all active obligations are fulfilled
--------------------------------------------------------------------------------------
MODULE Contract(triggered, activated, terminated, suspended, resumed,
				revoked_party, assigned_party, fulfilled_active_obligation)
  DEFINE
	_active 	 := (state = unassign | state = inEffect | state = suspension);
	_termination := (state = sTermination | state = unsTermination);

	-- obligations/powers' status changes once the contract goes to inEffect state
	_o_activated := (state = form & activated) |
						(state = suspension & resumed) |
						(state = unassign & assigned_party) |
						(state = inEffect);

  VAR
	state 		 : { not_created, form, inEffect, suspension, unassign, sTermination, unsTermination};

  ASSIGN
    init(state) := not_created;
    next(state) := case
		state = not_created & triggered  					: form;
		state = form        & activated  					: inEffect;
		state = inEffect    & fulfilled_active_obligation  	: sTermination;
		state = inEffect    & suspended  					: suspension;
		state = inEffect    & revoked_party  				: unassign;
		state = inEffect    & terminated 					: unsTermination;
		state = suspension  & resumed    					: inEffect;
		state = suspension  & terminated 					: unsTermination;
		state = unassign    & assigned_party 				: inEffect;
		state = unassign    & terminated 					: unsTermination;
		TRUE                             					: state;
    esac;

--------------------------------------------------------------------------------------
-- Domain Concepts
--------------------------------------------------------------------------------------
MODULE Role(party)
 DEFINE
	_party := party;

MODULE Asset(owner)
	DEFINE _owner := owner;
 
MODULE Situation(proposition)
 VAR state: {holds, not_holds};
 ASSIGN
    init(state) := not_holds;
    next(state) := case
		state = not_holds & proposition : holds;
		state = holds & !proposition 	: not_holds;
		TRUE 							: state;
	esac;
	
MODULE HappensWithin(event, situation)
 VAR state: {happened, not_happened};
 ASSIGN
    init(state) := not_happened;
    next(state) := case
		event.state = active & next(evnet.state) = happened & state = not_happened & situation.state = hold : happened;
		TRUE : state;
	esac;
	
--------------------------------------------------------------------------------------
-- Decleration
--------------------------------------------------------------------------------------	
MODULE Seller(party, returnAddress)
 DEFINE
	_returnAddress := returnAddress;
 VAR
	role : Role(party);
	
MODULE Buyer(party, warehouse)
 DEFINE
	_warehouse := warehouse;
 VAR
	role : Role(party);

MODULE Currency(cur)
 VAR value  : {"CAD", "USD", "EUR"};
 ASSIGN
    init(state) := "CAD";
    next(state) := case
		cur = "CAD" : "CAD";
		cur = "USD" : "USD";
		cur = "EUR" : "EUR";
		TRUE 		: state;
	esac;
	
MODULE MeatQuality(quality)
 VAR value  : {"PRIME", "AAA", "AA", "A"};
 ASSIGN
    init(state) := "PRIME";
    next(state) := case
		quality = "AAA" : "AAA";
		quality = "AA"  : "AA";
		quality = "A"   : "A";
		TRUE 			: state;
	esac;
 
MODULE PerishableGood(owner, quantity, quality)	
	DEFINE
		_quantity := quantity;
		_quality := quality;
	VAR
		asset : Asset(owner);
		
MODULE Delivered(start, max_time, item, deliveryAddress, delDueD)
	DEFINE
		_item := item;
		_deliveryAddress := deliveryAddress;
		_delDueD := delDueD;
	VAR
		event : Event(start, max_time);
		
MODULE Paid(start, max_time, amount, currency, from, to, payDueD)
	DEFINE
		_amount := amount;
		_currency := currency;
		_from := from;
		_to := to;
		_payDueD := payDueD;
	VAR
		event : Event(start, max_time);
		
MODULE PaidLate(start, max_time, amount, currency, from, to)
	DEFINE
		_amount := amount;
		_currency := currency;
		_from := from;
		_to := to;
	VAR
		event : Event(start, max_time);
		
MODULE Disclosed(start, max_time, contractID)
	DEFINE
		_contractID := contractID;
	VAR
		event : Event(start, max_time);		

--------------------------------------------------------------------------------------
-- Sale of Goods contract
--------------------------------------------------------------------------------------
MODULE MeatSale_Contract(cnt_id, buyer_party, seller_party, qnt, qlt, amt, curr, pay_due_date, delAdd, warehouse, effDate, del_due_days, intRate)
  CONSTANTS
	"Odel", "Opay",  "OlatePay", "SoBuyerDisclosure", "SoSellerDisclosure", "PsusDel", "PdelAssign", "PresumDel", "PterCnt", "goods";

  VAR	
	-- Decleration
    seller	: Seller(seller_party, delAdd);
	buyer	: Buyer(buyer_party, warehouse);
	
	goods				: PerishableGood(seller.role._party, qnt, qlt);
	--* problem: cannot pass goods to the parameter of delivered
	delivered			: Delivered(Odel.state=inEffect, del_due_days, "goods", 
							delAdd, del_due_days);						
	paid      			: Paid(Opay.state=inEffect, pay_due_date, amt, curr, buyer.role._party, 
							seller.role._party, pay_due_date);
	paidLate			: PaidLate(OlatePay.state=inEffect, 2, amt, curr, buyer.role._party, seller.role._party);
	buyerDisclosed 		: Disclosed(C._active, 5, cnt_id);
	sellerDisclosed 	: Disclosed(C._active, 5, cnt_id);

	suspended_delivery 	: Event(PsusDel.state = inEffect, 2);	
	resumed_delivery   	: Event(PresumDel.state = inEffect, 2);	
	
	terminated_C   		: Event(PterCnt.state = inEffect, 4);	
	sellerAssignedDel  	: Event(PdelAssign.state = inEffect, 4);


	-- Contract
	cnt_termination : Situation(PterCnt._active & terminated_C._happened &
						terminated_C.performer=PterCnt_creditor._name
						& PterCnt_creditor._is_performer);
						
	cnt_succ_Termination : Situation((C.state=inEffect) & !(Odel._active) & !(Opay._active) & !(OlatePay._active));
	C 		 : Contract(TRUE, TRUE, cnt_termination.state = holds, FALSE, FALSE, FALSE, 
				FALSE, cnt_succ_Termination.state = holds);
	
	
	-- Delivery Obligation
	Odel_antecedent : Situation(TRUE);
	Odel_consequent : Situation(delivered.event._happened & 
						delivered.event.performer = Odel_debtor._name & 
						Odel_debtor._is_performer);
	Odel_trigger	: Situation(TRUE);
	Odel_violation	: Situation(delivered.event._expired | (delivered.event._happened &
						!(delivered.event.performer = Odel_debtor._name & Odel_debtor._is_performer)));
	Odel_resumption	: Situation(PresumDel._active & resumed_delivery._happened & 
						resumed_delivery.performer=PresDel_creditor._name
						& PresDel_creditor._is_performer);
	Odel_suspension	: Situation(PsusDel._active & suspended_delivery._happened &
						suspended_delivery.performer=PsusDel_creditor._name
						& PsusDel_creditor._is_performer);	
				  
	Odel 	 : Obligation(FALSE, C._o_activated, cnt_termination.state = holds,
                  Odel_consequent.state = holds, Odel_trigger.state = holds, 
				  Odel_violation.state = holds, FALSE, FALSE, Odel_suspension.state = holds, FALSE, FALSE, Odel_resumption.state = holds, FALSE, FALSE, Odel_antecedent.state = holds);

	-- Payment obligation
	Opay_fulfillment: Situation(paid.event._happened &
						paid.event.performer = Opay_debtor._name & Opay_debtor._is_performer);
	Opay_violation	: Situation(paid.event._expired | (paid.event._happened & 
						!(paid.event.performer = Opay_debtor._name & Opay_debtor._is_performer)));
						
	Opay 	 : Obligation(FALSE, C._o_activated, cnt_termination.state = holds, 
				Opay_fulfillment.state = holds, TRUE, Opay_violation.state = holds, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE);

	-- Late payment obligation
	Opaidlate_fulfillment : Situation(paidLate.event._happened & paidLate.event.performer = Olpay_debtor._name &
						Olpay_debtor._is_performer);
						
	OlatePay : Obligation(FALSE, C._o_activated, cnt_termination.state = holds,
                  Opaidlate_fulfillment.state = holds, Opay_violation.state = holds, paidLate.event._expired, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE);

	-- Serviving obligations
	SoBuyerDisclosure : Obligation(TRUE, C._o_activated, cnt_termination.state = holds,
                  buyerDisclosed.event._expired, TRUE, (buyerDisclosed.event._happened & buyerDisclosed.event.performer = BuyDis_debtor._name & BuyDis_debtor._is_performer), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE);

	SoSellerDisclosure : Obligation(TRUE, C._o_activated, cnt_termination.state = holds,
                  sellerDisclosed.event._expired , TRUE, (sellerDisclosed.event._happened & sellerDisclosed.event.performer = SellDis_debtor._name & SellDis_debtor._is_performer),
				  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE);

	-- Powers
	PsusDel  : Power(C._o_activated, Opay_violation.state = holds, FALSE, FALSE, FALSE,
			   FALSE, FALSE, Odel_suspension.state = holds, FALSE, FALSE, TRUE);

	PresumDel: Power(C._o_activated, Opaidlate_fulfillment.state = holds, FALSE, FALSE, 
			   FALSE, FALSE, FALSE, Odel_resumption.state = holds, FALSE, FALSE, TRUE);
			 
	PterCnt  : Power(C._o_activated, Odel_violation.state = holds, FALSE, FALSE, FALSE,
			   FALSE, FALSE, cnt_termination.state = holds, FALSE, FALSE, TRUE);

	-- Assignment power
	PdelAssign_exertion	: Situation(PdelAssign._active & sellerAssignedDel._happened &
				sellerAssignedDel.performer=PdelAsg_creditor._name & PdelAsg_creditor._is_performer);
				
	PdelAssign  : Power(C._o_activated, TRUE, FALSE, FALSE, FALSE,
				FALSE, FALSE, PdelAssign_exertion.state = holds, FALSE, FALSE, TRUE);

	Odel_debtor   	: Party("Odel", seller.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	Odel_creditor 	: Party("Odel", buyer.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
	SellDis_debtor	: Party("SoSellerDisclosure", seller.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	SellDis_creditor: Party("SoSellerDisclosure", buyer.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);

	Opay_debtor   	: Party("Opay", buyer.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	Opay_creditor   : Party("Opay", seller.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
	Olpay_debtor   	: Party("OlatePay", buyer.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	Olpay_creditor  : Party("OlatePay", seller.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
	BuyDis_debtor   : Party("SoBuyerDisclosure", buyer.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	BuyDis_creditor	: Party("SoBuyerDisclosure", seller.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);

	PsusDel_debtor  : Party("PsusDel", buyer.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	PsusDel_creditor: Party("PsusDel", seller.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
	PdelAsg_debtor  : Party("PdelAssign", buyer.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	PdelAsg_creditor: Party("PdelAssign", seller.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);

	PresDel_debtor  : Party("PresumDel", seller.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	PresDel_creditor: Party("PresumDel", buyer.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
	PterCnt_debtor  : Party("PterCnt", seller.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
	PterCnt_creditor: Party("PterCnt", buyer.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);

  INVAR
	buyer.role._party != seller.role._party;


MODULE main
  CONSTANTS
	"CBEEF", "COSTCO", "good", "cad", "nov21", "ottawa";
  VAR
	sales_cnt 	: MeatSale_Contract(123, "COSTCO", "CBEEF", 4, "good", 1000, "cad", 4, "ottawa" , "ottawa", "nov21", 4, 10);
	
  ASSIGN
	------------------------------------------------------------------------------------
	-- Generic Properties
	------------------------------------------------------------------------------------
	--* Number	   : 1
	--* Description: a contract eventually terminates
	--* Type 	   : desirable property
	--* Pattern	   : Existence pattern #31
	--* Fails	   : if payment(Opay) is violated and the seller suspends delivery(Odel) by power
	--*		   		 PsusDel while paidLate is expired, then there is no way to resume payment(Opay)
	--* 	   		 by using PresumDel. Therefore, payment(Opay) is always suspended and then
	--*				 contract stays active.
--	LTLSPEC NAME LTL1 := F(sales_cnt.C.state = sTermination | sales_cnt.C.state = unsTermination)

	------------------------------------------------------------------------------------
	-- Specific Properties
	------------------------------------------------------------------------------------
	--* Number	   : 2
	--* Description: in case of late payment, the buyer is penalized no more than once.
	--* Type	   : desirable property
	--* Intention  : buyer
	--* Pattern	   : Absence pattern #13
	LTLSPEC NAME LTL2 := G(sales_cnt.paidLate.event._happened & sales_cnt.paidLate.event.performer = sales_cnt.Olpay_debtor._name & sales_cnt.Olpay_debtor._is_performer
				-> G !(sales_cnt.paidLate.event._inactive))
				
	
	--* Number	   : 3
	--* Description: in any case, whenever delivery of goods occurs, payment has happend earlier
	--* 			 (i.e., payment must happens before any delivery).
	--* Type	   : desirable property
	--* Intention  : seller
	--* Pattern	   : Precedence pattern #51
	--* Fails	   : delivery does not pertain to payment because delivery obligation(Odel) is
	--*			    independent of payment obligation(Opay)
	--* Pattern	   : Precedence pattern #51
--	LTLSPEC NAME LTL3 := !(sales_cnt.delivered.event._happened & sales_cnt.delivered.event.performer = sales_cnt.Odel_debtor._name & sales_cnt.Odel_debtor._is_performer) U
--						(sales_cnt.paid.event._happened & sales_cnt.paid.event.performer = sales_cnt.Opay_debtor._name & sales_cnt.Odel_debtor._is_performer)
						
	--* Number	   : 4
	--* Description: in any case, if an order is paid off, the goods are definitely delivered.
	--* Type	   : desirable property
	--* Intention  : buyer
	--* Pattern	   : Response pattern #41
	--* Fails	   : delivery does not pertain to payment because delivery obligation(Odel) is
	--*				 independent of payment obligation(Opay)
--	LTLSPEC NAME LTL4 := G(sales_cnt.paid._happened & sales_cnt.paid.performer = sales_cnt.Opay_debtor._name & sales_cnt.Opay_debtor._is_performer
--				-> F sales_cnt.delivered._happened & sales_cnt.delivered.performer =
--					 sales_cnt.Odel_debtor._name & sales_cnt.Odel_debtor._is_performer)

	
	--* Number	   : 5
	--* Description: it is possible to suspend delivery whenever payment is ignored
	--* Type	   : desirable property
	--* Intention  : buyer
	--* Pattern	   : Consequence pattern #3
	--* Fails	   : CTL cannot model this property because AG checks all nodes including leaves.
	--* 			 Because 'paid.expired' state is repreated in all nodes, 'suspended_delivery'
	--*				 must happen in the future of a leaf(includig the leaf)! This is impossible
	--*				 because suspended_delivery counter starts in a node and finally it may expire
	--*				 at a leaf node.
--	CTLSPEC  NAME CTL1 := AG(sales_cnt.paid._expired & sales_cnt.paid.performer = sales_cnt.Opay_debtor._name & sales_cnt.Opay_debtor._is_performer
--				-> EF sales_cnt.suspended_delivery._happened & sales_cnt.suspended_delivery.performer
--						= sales_cnt.PsusDel_creditor._name & sales_cnt.PsusDel_creditor._is_performer)

	--* Number	   : 6
	--* Description: the contract shall terminates if delivery and payment are done before their due dates.
	--* Type	   : desirable property
	--* Pattern	   : Universality pattern #23
--	LTLSPEC NAME LTL5 := G((sales_cnt.delivered.event._happened & sales_cnt.delivered.event.performer = sales_cnt.Odel_debtor._name & sales_cnt.Odel_debtor._is_performer & sales_cnt.paid.event._happened &
--					sales_cnt.paid.event.performer = sales_cnt.Opay_debtor._name & sales_cnt.Opay_debtor._is_performer)
--					-> F sales_cnt.C.state=sTermination)

	--* Number	   : 7
	--* Description: it is possible to resume delivery obligation
	--* Type	   : desirable property
	--* Intention  : seller
	--* Pattern	   : Consequence pattern #3
--	CTLSPEC NAME CTL2 := AG(sales_cnt.Odel.state = suspension -> EF sales_cnt.Odel.state = inEffect)

	--* Number	   : 8
	--* Description: obligations are no longer in effect whenever contract terminates
	--* Type	   : desirable property
	--* Pattern	   : Absence pattern #3
	--* Fails	   : due to contract inconsistency. Contract termination power(PterCnt) is sensitive
	--*				 to delivery event(not Odel status). Then, if delivery is expired, PterCnt may
	--*				 terminate the contract(i.e., all active obligations terminate). Simultaneouly,
	--*				 if payment is violated(Opay) and seller suspends delivery obligation(Odel),
	--*			     paidLate event may resume Odel(by PresumDel) which is in conflict with
	--*				 obligation termination.
--	LTLSPEC NAME LTL7 := G(sales_cnt.C.state = unsTermination -> G !(sales_cnt.Odel.state = inEffect |
--				sales_cnt.Opay.state = inEffect | sales_cnt.OlatePay.state = inEffect))

	--* Number	   : 9
	--* Description: good is always delivered after payment
	--* Type	   : desirable property
	--* Fails	   : Opay(payment) is prior to Odel(delivery)
	--* Intention  : Seller
	--* Pattern	   : Precedence pattern #51
--	LTLSPEC NAME LTL8 := !(sales_cnt.Odel.state = fulfillment) U sales_cnt.Opay.state = fulfillment

	--* Number	   : 10
	--* Description: penalty is counted maximum once
	--* Type	   : desirable property
	--* Intention  : buyer
	--* Pattern	   : Absence pattern #13
--	LTLSPEC NAME LTL9 := G(sales_cnt.OlatePay.state = fulfillment -> G !(sales_cnt.OlatePay.state = inEffect))

	--* Number	   : 11
	--* Description: delivery assignment transfers the right from ALEX to SOFIA
	--* Type	   : desirable property
	--* Intention  : seller
	--* Pattern	   : Universality pattern #23
--	LTLSPEC NAME LTL10 := G(sales_cnt.PdelAssign.state = sTermination -> G (!sales_cnt.Odel.party1.is_rightHolder &
--					sales_cnt.Odel.party3.is_rightHolder))
	
	--* Number	   : 12
	--* Description: payment and late payment should not be active together
	--* Type	   : desirable property
	--* Pattern	   : Absence pattern #13
--	LTLSPEC NAME LTL11 := G(sales_cnt.OlatePay.state = inEffect -> G !(sales_cnt.Opay.state = inEffect))
	
	------------------------------------------------------------------------------------
	-- Specific reachability(as a subset of liveness)
	------------------------------------------------------------------------------------
	--* Number	   : 13
	--* Description: it is always possible to activate powers and obligations
	--*				 (i.e., all powers and obligations are useful)
	--* Type	   : desirable property
	--* Pattern	   : Occurrence pattern #1
	CTLSPEC NAME CTL4_1 := EF(sales_cnt.PsusDel._active);
	CTLSPEC NAME CTL4_2 := EF(sales_cnt.PresumDel._active);
	CTLSPEC NAME CTL4_3 := EF(sales_cnt.PterCnt._active);
	CTLSPEC NAME CTL4_4 := EF(sales_cnt.Odel._active);
	CTLSPEC NAME CTL4_5 := EF(sales_cnt.Opay._active);
	CTLSPEC NAME CTL4_6 := EF(sales_cnt.OlatePay._active);
	
	------------------------------------------------------------------------------------
	-- How to reach a goal
	------------------------------------------------------------------------------------
	--* Number	   : 14
	--* Description: How to receive an order and terminate the contract without payment
	--* Type	   : desirable property
	--* Intention  : buyer
	--* Pattern	   : Exclusion pattern #1
	CTLSPEC NAME CTL5 := !EF((sales_cnt.cnt_termination.state=holds | sales_cnt.C.state=unsTermination)
				& sales_cnt.Odel.state = fulfillment
				& ! (sales_cnt.Opay.state = fulfillment | sales_cnt.OlatePay.state = fulfillment))
	
	------------------------------------------------------------------------------------
	-- Conformance Checking
	------------------------------------------------------------------------------------
	--* Number	   : 15
	--* Description: the contract terminates if payment and delivery events happen by right parties.
	--* Type	   : desirable property(liveness)
	--* Intention  : 
	--* Pattern	   : Response pattern #41
--	LTLSPEC NAME LTL12 := G(sales_cnt.paid_performer & sales_cnt.delivered_performer -> 
--							F(sales_cnt.C.state = sTermination & sales_cnt.Opay.state = fulfillment & sales_cnt.Odel.state = fulfillment));
	
	--* Number	   : 16
	--* Description: Seller delivers the meat under appropriate condition, but Buyer does not pay.
	--* Type	   : desirable property
	--* Intention  : 
	--* Pattern	   : Response pattern #41
--	LTLSPEC NAME LTL13 := G(sales_cnt.delivered_performer & G(!sales_cnt.paid_performer) -> 
--							F(sales_cnt.Odel.state = fulfillment & sales_cnt.Opay.state = violation));
							
	--* Number	   : 17
	--* Description: Buyer resumes the suspended delivery obligation by paying a fine.
	--* Type	   : desirable property
	--* Intention  : 
	--* Pattern	   : Response pattern #41
--	LTLSPEC NAME LTL6 := G(sales_cnt.Odel.state = suspension & sales_cnt.paidlate_performer -> 
--							F(sales_cnt.OlatePay.state = fulfillment & sales_cnt.Opay.state = violation));