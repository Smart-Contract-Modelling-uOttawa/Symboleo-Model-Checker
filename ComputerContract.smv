MODULE Timer(start)
 VAR active1  : boolean;
     expired1 : boolean;
 ASSIGN
   init(active1) := start;
   next(active1) := (active1 | start) ? TRUE : active1;
   init(expired1) :=  active1 ? {TRUE,FALSE} : FALSE;
   next(expired1) :=  case
           active1 & !expired1 : {TRUE,FALSE};
           expired1           : TRUE;
           TRUE              : FALSE;
       esac;

MODULE Event(start)
 DEFINE 
 		_active := (state = active);
 		_inactive := (state = inactive);
        _happened := (state = happened);
        _expired  := (state = expired);
 VAR triggered : boolean;
         timer : Timer(start & !_happened & !_expired);
         state : {inactive, active, happened, expired};
		 performer	: {"Amal", "Sofana", "PC-Mart", "NextComp"};

 ASSIGN
	next(performer)	:= case
		state=active & start	: {"Amal", "Sofana", "PC-Mart", "NextComp"};
		TRUE	 				: performer;
	esac;
 ASSIGN
  init(triggered) := FALSE;
  next(triggered) := (state=active & start) ? {FALSE,TRUE} : FALSE;
  init(state)     := inactive;
  next(state)     := case
    state=inactive & start                          : active;
    state=active & start & triggered &
							timer.active1 : happened;
	state=active & start & timer.expired1 : expired;
    TRUE                                            : state;
  esac;

--------------------------------------------------------------------------------------
-- 'name' is party name
-- 'removeL/R/P' releases liability, righHolder or performer position of a party
-- 'addL/R/P' adds liability, righHolder or performer position to a party
--------------------------------------------------------------------------------------
MODULE Party(norm, name, removeL, addL, removeR, addR, removeP, addP)
  DEFINE
	_name 			:= name;
	_norm			:= norm;
	_is_performer	:= p_state=P;
	_is_liable		:= l_state=L;
	_is_rightHolder	:= r_state=R;

  VAR
	l_state	: {Init, L};
	r_state	: {Init, R};
	p_state	: {Init, P};

  ASSIGN
	init(l_state) := Init;
	next(l_state)	:= case
		l_state=Init & addL	: L;
		l_state=L &removeL	: Init;
		TRUE				: l_state;
	esac;

  ASSIGN
	init(r_state) := Init;
	next(r_state)	:= case
		r_state=Init & addR	: R;
		r_state=R & removeR : Init;
		TRUE				: r_state;
	esac;

  ASSIGN
	init(p_state) := Init;
	next(p_state)	:= case
		p_state=Init & addP : P;
		p_state=P & removeP	: Init;
		TRUE				: p_state;
	esac;

  INVAR
	!(addL & removeL) &
	!(addR & removeR) &
	!(addP & removeP) &
	!(_is_rightHolder & _is_liable);

--------------------------------------------------------------------------------------
-- 'cnt_in_effect'    indicates if the contract is in inEffect state
-- 'power_suspended'  indicates if a power suspends the obligation
-- 'cnt_suspended'    indicates if the contract suspension suspends the obligation
-- 'power_resumed'    indicates if a power resumption resumes the obligation
-- 'cnt_resumed'      indicates if the contract resumption resumes the obligation
--------------------------------------------------------------------------------------
MODULE Obligation(name, surviving, cnt_in_effect, cnt_untermination,
                  fulfilled, triggered, violated, activated,
				  expired1, power_suspended, cnt_suspended, terminated, power_resumed,
				  cnt_resumed, discharged, antecedent)
  DEFINE
	_name 		:= name;
	_surviving	:= surviving;
	_suspended 	:= (power_suspended | (cnt_suspended & !surviving));
	_active 	:= (state = inEffect | state = suspension);

  VAR
	state 		: {not_created, create, inEffect, suspension, discharge,
				   fulfillment, violation, unsTermination};
	sus_state	: {not_suspended, sus_by_contract, sus_by_power};

  ASSIGN
 --NEW: update axioms(surviving obligations are not suspended! informally mentioned)
	init(sus_state) := not_suspended;
	next(sus_state)	:= case
		sus_state=not_suspended & !surviving & cnt_suspended 	: sus_by_contract;
		sus_state=sus_by_contract & !surviving & cnt_resumed	: not_suspended;
		sus_state=not_suspended & !surviving & power_suspended 	: sus_by_power;
		sus_state=sus_by_power & !surviving & power_resumed		: not_suspended;
		TRUE													: sus_state;
	esac;

  ASSIGN
    init(state) := not_created;
    next(state) := case
		cnt_in_effect & state=not_created   & triggered & !antecedent : create;
		cnt_in_effect & state=not_created   & triggered & antecedent  : inEffect;
		cnt_in_effect & state=create        & antecedent              : inEffect;
		cnt_in_effect & state=create        & (expired1 | discharged)  : discharge;
		cnt_in_effect & state=inEffect      & fulfilled               : fulfillment;
		cnt_in_effect & state=inEffect      & _suspended              : suspension;
		cnt_in_effect & state=inEffect      & violated                : violation;
		cnt_in_effect & _active            	& terminated              : unsTermination;
		cnt_untermination & !surviving  	& _active           	  : unsTermination;
		sus_state=sus_by_contract & state=suspension  & cnt_resumed   : inEffect;
		sus_state=sus_by_power	  & state=suspension  & power_resumed   : inEffect;
		TRUE                                                          : state;
  esac;

--------------------------------------------------------------------------------------
-- 'cnt_in_effect'   indicates if the contract is in inEffect state
-- 'power_suspended' indicates if a power suspends the power
-- 'cnt_suspended'   indicates if the contract suspension suspends the power
-- 'power_resumed'   indicates if a power resumption resumes the power
-- 'cnt_resumed'     indicates if the contract resumption resumes the power
--------------------------------------------------------------------------------------
MODULE Power(name, cnt_in_effect, triggered, activated, expired1, power_suspended, cnt_suspended,
       	     terminated, exerted, power_resumed, cnt_resumed, antecedent)
  DEFINE
	_name		 := name;
	_active 	 := (state = inEffect | state = suspension);
	_suspended 	 := (power_suspended | cnt_suspended);

  VAR
	state 		: {not_created, create, inEffect, suspension, sTermination, unsTermination};
	sus_state	: {not_suspended, sus_by_contract, sus_by_power};

  ASSIGN
	init(sus_state) := not_suspended;
	next(sus_state)	:= case
		sus_state=not_suspended & cnt_suspended 	: sus_by_contract;
		sus_state=sus_by_contract & cnt_resumed		: not_suspended;
		sus_state=not_suspended & power_suspended 	: sus_by_power;
		sus_state=sus_by_power & power_resumed		: not_suspended;
		TRUE										: sus_state;
	esac;

  ASSIGN
   init(state) := not_created;
   next(state) := case
     cnt_in_effect & state = not_created 	& triggered & !antecedent : create;
     cnt_in_effect & state = not_created 	& triggered & antecedent  : inEffect;
     cnt_in_effect & state = create      	& antecedent              : inEffect;
     cnt_in_effect & state = create      	& expired1                : unsTermination;
     cnt_in_effect & state = inEffect    	& exerted                 : sTermination;
     cnt_in_effect & state = inEffect   	& _suspended              : suspension;
     cnt_in_effect & state = inEffect    	& expired1                : unsTermination;
	 cnt_in_effect & _active  			 	& terminated              : unsTermination;

	 sus_state=sus_by_contract & state=suspension  & cnt_resumed 	  : inEffect;
	 sus_state=sus_by_power	   & state=suspension  & power_resumed      : inEffect;

     TRUE                                          				   	  : state;
   esac;

--------------------------------------------------------------------------------------
-- 'assigned_party'				 indicates if a party is assigned to a role
-- 'revoked_party'				 indicates if a party is unassigned from a role
-- 'fulfilled_active_obligation' indicates if all active obligations are fulfilled
--------------------------------------------------------------------------------------
MODULE Contract(triggered, activated, terminated, suspended, resumed,
				revoked_party, assigned_party, fulfilled_active_obligation)
  DEFINE
	_active 	 := (state = unassign | state = inEffect | state = suspension);
	_termination := (state = sTermination | state = unsTermination);

	-- obligations/powers' status changes once the contract goes to inEffect state
	_o_activated := (state = form & activated) |
						(state = suspension & resumed) |
						(state = unassign & assigned_party) |
						(state = inEffect);

  VAR
	state 		 : { not_created, form, inEffect, suspension, unassign, sTermination, unsTermination};

  ASSIGN
    init(state) := not_created;
    next(state) := case
		state = not_created & triggered  					: form;
		state = form        & activated  					: inEffect;
		state = inEffect    & fulfilled_active_obligation  	: sTermination;
		state = inEffect    & suspended  					: suspension;
		state = inEffect    & revoked_party  				: unassign;
		state = inEffect    & terminated 					: unsTermination;
		state = suspension  & resumed    					: inEffect;
		state = suspension  & terminated 					: unsTermination;
		state = unassign    & assigned_party 				: inEffect;
		state = unassign    & terminated 					: unsTermination;
		TRUE                             					: state;
    esac;

--------------------------------------------------------------------------------------
-- CONTRACT INDEPENDENT CONCEPTS
--------------------------------------------------------------------------------------
MODULE Role(party)
 DEFINE _party := party;

MODULE Asset(owner)
 DEFINE _owner := owner;
 
MODULE Situation(proposition)
 DEFINE _holds := proposition;
 
-- WhappensBefore(e,t), ShappensBefore(e,t) are HappensAfter(e,t) are simulated as Happens(e,t) 		 
MODULE WhappensBefore(event, time)
 DEFINE _false  := (state = not_happened);
	    _true := (state = happened);
 VAR state: {not_happened, happened};
	ASSIGN
	    init(state) := not_happened;
	    next(state) := case
			state = not_happened & event.event._active & next(event.event._happened) : happened;
			TRUE : state;
		esac;
		
MODULE ShappensBefore(event, time)
 DEFINE _false  := (state = not_happened);
	    _true := (state = happened);
 VAR state: {not_happened, happened};
	ASSIGN
	    init(state) := not_happened;
	    next(state) := case
			state = not_happened & event.event._active & next(event.event._happened) : happened;
			TRUE : state;
		esac;

MODULE HappensAfter(event, time)
 DEFINE _false  := (state = not_happened);
	    _true := (state = happened);
 VAR state: {not_happened, happened};
	ASSIGN
	    init(state) := not_happened;
	    next(state) := case
			state = not_happened & event.event._active & next(event.event._happened) : happened;
			TRUE : state;
		esac;
			
MODULE WhappensBeforeE(event1, event2)
 DEFINE _false  := (state = not_happened);
	    _true := (state = happened);
 VAR state: {not_happened, happened};
	ASSIGN
	    init(state) := not_happened;
	    next(state) := case
			state = not_happened & event1.event._active & next(event1.event._happened) & !(next(event2_happened)) : happened;
			TRUE : state;
		esac;
	
MODULE ShappensBeforeE(event1, event2)
 DEFINE _false  := (state = not_happened);
        _true 	:= (state = ev1_ev2_happened);
 VAR state: {not_happened, ev1_happened, ev1_ev2_happened};
 	ASSIGN
   		init(state) := not_happened;
    	next(state) := case
			state = not_happened & event1.event._active & next(event1.event._happened) & !(next(event2.event._happened)) : ev1_happened;
			state = ev1_happened & event2.event._active & next(event2.event._happened) : ev1_ev2_happened;
			TRUE : state;
 esac;
	
MODULE HappensWithin(event, situation)
 DEFINE _false  := (state = not_happened);
        _true 	:= (state = happened);
 VAR state: {happened, not_happened};
 	ASSIGN
    	init(state) := not_happened;
    	next(state) := case
			state = not_happened & event.event._active & next(event.event._happened) & situation._holds : happened;
			TRUE : state;
		esac;	

MODULE HappensAfterE(event1, event2)
 DEFINE _false  := (state = not_happened);
        _true := (state = ev2_ev1_happened);

 VAR state: {not_happened, ev2_happened, ev2_ev1_happened};
 	ASSIGN
    	init(state) := not_happened;
    	next(state) := case
			state = not_happened & !(next(event1_happened)) & event2.event._active & next(event2.event._happened) : ev2_happened;
			state = ev2_happened & event1.event._active & next(event1.event._happened) : ev2_ev1_happened;
			TRUE : state;	
	esac;

--------------------------------------------------------------------------------------
-- CONTRACT DEPENDENT CONCEPTS
--------------------------------------------------------------------------------------

MODULE Store(party)
	 VAR
			role : Role(party);

MODULE Customer(party, addr)
DEFINE
						_addr := addr;
	 VAR
			role : Role(party);


MODULE Computer (owner,type, price, options)
	 VAR
			asset:Asset(owner);


MODULE Ordered(start, who, item, date)
	 VAR
		event : Event(start);

MODULE Delivered(start, item, delAddr, date)
	 VAR
		event : Event(start);

MODULE Paid(start, amount)
	 VAR
		event : Event(start);

MODULE PayLate(start)
	 VAR
		event : Event(start);

MODULE Policy(start, amountmin, amountmax, lateAmount)
	 VAR
		event : Event(start);

MODULE Reimburse(start, amount)
	 VAR
		event : Event(start);


--------------------------------------------------------------------------------------
-- CONTRACT
--------------------------------------------------------------------------------------
MODULE ComputerContract (party1, party2, computer,address, paidAmount, reimburseAmount, depositAmount,paidLateAmount,orderedDate,deliveredDate)

	CONSTANTS
	"workstation","laptop","desktop","keyboard","mouse","monitor","oOrder","oDel","oPaid","oPay","oPayLateD","oReimburse","pCancel","pLateComp";
	
	VAR
	   store: Store(party2);
	   cust: Customer(party1, address);
		hbefore_delivered_ordered_date_7_days : WhappensBefore(delivered, orderedDate + 168);
		
		hafter_paidLateDel_ordered_date_10_days : HappensAfter(paidLateDel, orderedDate + 240);
		
		hbefore_paid_ordered_date_10_days : WhappensBefore(paid, orderedDate + 240);
		
		ordered : Ordered(oOrder.state=create | oDel.state=create, cust, computer,orderedDate);
		
		delivered : Delivered(oDel.state=inEffect, computer, cust.addr,deliveredDate);
		
		paid : Paid(cnt.state=inEffect | oPay.state=inEffect, paidAmount);
		
		paidLateDel : Paid(oPayLateD.state=inEffect,paidLateAmount);
		
		policy : Policy(cnt.state=inEffect, 0.15 * computer.price, 0.2 * computer.price, 0.95 * computer.price);
		
		payLateOptionChosen : PayLate(cnt.state=inEffect | cnt.state=inEffect);
		
		deposit : Paid(oOrder.state=inEffect,depositAmount);
		
		reimburse : Reimburse(cnt.state=inEffect,reimburseAmount);
		
		
		cnt_succ_Termination : Situation((cnt.state=inEffect)
		& !(oOrder._active)
		& !(oDel._active)
		& !(oPaid._active)
		& !(oPay._active)
		& !(oPayLateD._active)
		& !(oReimburse._active)
		);
		
		--------------
		-- SITUATIONS
		--------------
		ComputerContract_precondition : Situation (cnt.state = not_created -> (policy.amountmin<=policy.amountmax) & (policy.amountmin>=0));
		
		oOrder_violated : Situation ((deposit.event._expired | (deposit.event._happened & !(deposit.event.performer = oOrder_debtor._name & oOrder_debtor._is_performer)))|(deposit.amount>policy.amountmax)|(deposit.amount<policy.amountmin));
		
		oDel_violated : Situation ((delivered.event._expired | (delivered.event._happened & !(delivered.event.performer = oDel_debtor._name & oDel_debtor._is_performer))));
		
		oPay_violated : Situation ((paid.event._expired | (paid.event._happened & !(paid.event.performer = oPay_debtor._name & oPay_debtor._is_performer)))|(paid.amount!=computer.price));
		
		oPayLateD_violated : Situation ((paidLateDel.event._expired | (paidLateDel.event._happened & !(paidLateDel.event.performer = oPayLateD_debtor._name & oPayLateD_debtor._is_performer)))|(paid.amount!=policy.lateAmount));
		
		oOrder_expired : Situation ((ordered.event._expired | (ordered.event._happened & !(ordered.event.performer = oOrder_debtor._name & oOrder_debtor._is_performer))));
		
		oDel_expired : Situation ((ordered.event._expired | (ordered.event._happened & !(ordered.event.performer = oDel_debtor._name & oDel_debtor._is_performer))));
		
		oPaid_expired : Situation (FALSE);
		
		oPay_expired : Situation (oDel.state=fulfillment);
		
		oPayLateD_expired : Situation (pCancel.state=inEffect);
		
		oReimburse_expired : Situation (pCancel.state=inEffect);
		
		pCancel_expired : Situation (FALSE);
		
		pLateComp_expired : Situation (FALSE);
		
		oOrder_antecedent : Situation ((ordered.event._happened));
		
		oDel_antecedent : Situation ((ordered.event._happened));
		
		oPay_antecedent : Situation (oDel.state=fulfillment);
		
		oPayLateD_antecedent : Situation (pCancel.state=inEffect);
		
		oReimburse_antecedent : Situation (pCancel.state=inEffect);
		
		oOrder_consequent : Situation ((deposit.event._happened & deposit.event.performer = oOrder_debtor._name & oOrder_debtor._is_performer) & (deposit.amount<=policy.amountmax) & (deposit.amount>=policy.amountmin));
		
		oDel_consequent : Situation (hbefore_delivered_ordered_date_7_days._true);
		
		oPaid_consequent : Situation (TRUE);
		
		oPay_consequent : Situation (hbefore_paid_ordered_date_10_days._true & (paid.amount=computer.price));
		
		oPayLateD_consequent : Situation (hafter_paidLateDel_ordered_date_10_days._true & (paid.amount=policy.lateAmount));
		
		oReimburse_consequent : Situation (TRUE);
		
		oPaid_trigger : Situation ((paid.event._happened) | (payLateOptionChosen.event._happened));
		
		oPayLateD_trigger : Situation ((payLateOptionChosen.event._happened));
		
		oReimburse_trigger : Situation ((reimburse.event._happened));
		
		pCancel_trigger : Situation (oDel.state=violation);
		
		pLateComp_trigger : Situation (oDel.state=violation);

		pLateComp_exertion : Situation ((pLateComp._active & pLateComp_exerted._happened & pLateComp_exerted.performer = pLateComp_creditor._name & pLateComp_creditor._is_performer ));
		pCancel_exertion : Situation ((pCancel._active & pCancel_exerted._happened & pCancel_exerted.performer = pCancel_creditor._name & pCancel_creditor._is_performer ));

		
		cnt: Contract(TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, cnt_succ_Termination._holds);
			
		--------------
		-- OBLIGATIONS
		--------------		
		oOrder : Obligation("oOrder", FALSE, cnt._o_activated, FALSE, oOrder_consequent._holds, TRUE, oOrder_violated._holds, FALSE, oOrder_expired._holds, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, oOrder_antecedent._holds);
				
		oDel : Obligation("oDel", FALSE, cnt._o_activated, FALSE, oDel_consequent._holds, TRUE, oDel_violated._holds, FALSE, oDel_expired._holds, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, oDel_antecedent._holds);
				
		oPaid : Obligation("oPaid", FALSE, cnt._o_activated, FALSE, oPaid_consequent._holds, oPaid_trigger._holds, FALSE, FALSE, oPaid_expired._holds, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE);
				
		oPay : Obligation("oPay", FALSE, cnt._o_activated, FALSE, oPay_consequent._holds, TRUE, oPay_violated._holds, FALSE, oPay_expired._holds, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, oPay_antecedent._holds);
				
		oPayLateD : Obligation("oPayLateD", FALSE, cnt._o_activated, FALSE, oPayLateD_consequent._holds, oPayLateD_trigger._holds, oPayLateD_violated._holds, FALSE, oPayLateD_expired._holds, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, oPayLateD_antecedent._holds);
				
		oReimburse : Obligation("oReimburse", FALSE, cnt._o_activated, FALSE, oReimburse_consequent._holds, oReimburse_trigger._holds, FALSE, FALSE, oReimburse_expired._holds, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, oReimburse_antecedent._holds);
				
		
		--------------
		-- POWERS
		--------------
		pCancel : Power("pCancel", cnt._o_activated, pCancel_trigger._holds, FALSE, pCancel_expired._holds, FALSE, FALSE, FALSE, pCancel_exertion._holds, FALSE, FALSE, TRUE);
		
		pLateComp : Power("pLateComp", cnt._o_activated, pLateComp_trigger._holds, FALSE, pLateComp_expired._holds, FALSE, FALSE, FALSE, pLateComp_exertion._holds, FALSE, FALSE, TRUE);
		
		
		--------------
		-- PARTIES
		--------------
		oOrder_debtor : Party(oOrder._name, cust.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
		oOrder_creditor : Party(oOrder._name, store.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
		
		oDel_debtor : Party(oDel._name, store.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
		oDel_creditor : Party(oDel._name, cust.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
		
		oPaid_debtor : Party(oPaid._name, store.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
		oPaid_creditor : Party(oPaid._name, cust.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
		
		oPay_debtor : Party(oPay._name, cust.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
		oPay_creditor : Party(oPay._name, store.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
		
		oPayLateD_debtor : Party(oPayLateD._name, cust.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
		oPayLateD_creditor : Party(oPayLateD._name, store.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
		
		oReimburse_debtor : Party(oReimburse._name, store.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
		oReimburse_creditor : Party(oReimburse._name, cust.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
		
		
		pCancel_debtor : Party(pCancel._name, store.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
		pCancel_creditor : Party(pCancel._name, cust.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
		
		pLateComp_debtor : Party(pLateComp._name, store.role._party, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE);
		pLateComp_creditor : Party(pLateComp._name, cust.role._party, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE);
		
		
		-----------------------
		-- IMPLICIT CONSTRAINTS
		-----------------------
		INVAR 
		 ((hbefore_delivered_ordered_date_7_days.time <  hafter_paidLateDel_ordered_date_10_days.time) & (hafter_paidLateDel_ordered_date_10_days.state =happened )) -> ( (hbefore_delivered_ordered_date_7_days.event.state = happened | hbefore_delivered_ordered_date_7_days.event.state = expired) )
		INVAR 
		 ((hbefore_delivered_ordered_date_7_days.time <  hbefore_paid_ordered_date_10_days.time) & (hbefore_paid_ordered_date_10_days.event.state = active)) -> ( 
		 (hbefore_delivered_ordered_date_7_days.event.state = happened | hbefore_delivered_ordered_date_7_days.event.state = expired) )
		INVAR 
		 ((hafter_paidLateDel_ordered_date_10_days.time <  hbefore_paid_ordered_date_10_days.time) & (hbefore_paid_ordered_date_10_days.event.state = active)) -> ( 
		 (hafter_paidLateDel_ordered_date_10_days.event.state = happened | hafter_paidLateDel_ordered_date_10_days.event.state = expired) )
		INVAR 
		 ((hbefore_paid_ordered_date_10_days.time <  hafter_paidLateDel_ordered_date_10_days.time) & (hafter_paidLateDel_ordered_date_10_days.event.state =happened )) -> ( 
		 (hbefore_paid_ordered_date_10_days.event.state = happened | hbefore_paid_ordered_date_10_days.event.state = expired) )
		
		--------------
		-- CONSTRAINTS
		--------------
		INVAR 
			ComputerContract_precondition._holds;
		
		--------------
		-- Assignment
		--------------
		
		 ASSIGN 
		 next(paid.amount) := case 
		oPaid.state=fulfillment : paid.amount + deposit.amount;
		oReimburse.state=fulfillment : 0;
		 TRUE :paid.amount;
		esac;
		 ASSIGN 
		 next(reimburse.amount) := case 
		oReimburse.state=fulfillment : deposit.amount;
		 TRUE :reimburse.amount;
		esac;
		 ASSIGN 
		 next(deposit.amount) := case 
		oReimburse.state=fulfillment : 0;
		 TRUE :deposit.amount;
		esac;
MODULE main
CONSTANTS
"PC-Mart", "NextComp", "Amal", "Sofana", "workstation", "laptop", "desktop", "monitor", "keyboard", "mouse", "Ottawa", "Montreal";
FROZENVAR
cust_name : {"Amal", "Sofana"};
store_name : {"PC-Mart", "NextComp"};
address : {"Ottawa", "Montreal"};
type : {"workstation", "laptop", "desktop"};
options : {"monitor", "keyboard", "mouse"};
price : real;
orderedDate: {1, 3,4,5};
deliveredDate: {6, 7,9,1};
VAR
paidAmount :real;
depositAmount:real; 
reimburseAmount: real;
paidLateAmount:real;

-- CONSTRAINTS
INIT 1000.0 <= price & price <= 3000.0;
INVAR 150.0 <= depositAmount & depositAmount <= 250.0;
INVAR  paidLateAmount = price* 0.95;
INVAR 1000.0 <= paidAmount & paidAmount <= 3000.0;
INVAR reimburseAmount = depositAmount;
--ASSIGN
--		 init(reimburseAmount):=0.0 ;
--		 init(paidAmount):=price - depositAmount;
VAR
computer : Computer(cust_name, type, price, options);
computer_cnt : ComputerContract(cust_name, store_name, computer, address, paidAmount, reimburseAmount, depositAmount,paidLateAmount,orderedDate,deliveredDate);
-- Global contract properties
--LTLSPEC NAME LTL1 := F(computer_cnt.cnt.state = sTermination | computer_cnt.cnt.state = unsTermination);
-- specific contract properties
--- 2
--LTLSPEC NAME LTL2 := G (computer_cnt.pLateComp.state=fulfillment ->
 --                        G !(computer_cnt.oPayLateD.state=inEffect));
--- 3
--LTLSPEC NAME LTL3 := !(computer_cnt.oDel.state = fulfillment) U (computer_cnt.oPay.state = fulfillment | computer_cnt.oPayLateD.state = fulfillment);
--- 4 This one with no Response
--LTLSPEC NAME LTL4_1 := (F(computer_cnt.oPay.state = fulfillment) -> F(computer_cnt.oDel.state = inEffect));
----------------------------------------------------------------------------------------------------------
 -- LTLSPEC NAME LTL4_1 :=G ((computer_cnt.ordered.event._happened)-> F(computer_cnt.oDel.state = inEffect | computer_cnt.oDel._active | computer_cnt.oDel.state = fulfillment | computer_cnt.oDel.state = violation));
--------------------------------------------------------------------------------------------------------------
 --LTLSPEC NAME LTL5 := G(!((F(computer_cnt.cnt.sTermination -> computer_cnt.cnt.state= unsTermination)) & (computer_cnt.oDel.state = fulfillment) & !((computer_cnt.oPay.state = fulfillment) -> (computer_cnt.oPayLateD.state = fulfillment))));
 
-- 5 describe this: 
--CTLSPEC NAME CTL5 := !EF((computer_cnt.cnt.sTermination | computer_cnt.cnt.state= unsTermination) & computer_cnt.oDel.state=fulfillment & !(computer_cnt.oPay.state=fulfillment | computer_cnt.oPayLateD.state=fulfillment))
LTLSPEC NAME LTL5 := G((((computer_cnt.cnt.state= sTermination | computer_cnt.cnt.state= unsTermination) & computer_cnt.oDel.state=fulfillment) ->G(computer_cnt.oPay.state=fulfillment | computer_cnt.oPayLateD.state=fulfillment)))
